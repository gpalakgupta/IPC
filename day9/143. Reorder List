/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head){
        ListNode curr = head;
        ListNode pre = null;
        ListNode next = null;
        while(curr != null){
            next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        return pre;
    }
    public void reorderList(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode node1 = head;
        ListNode node2 = slow.next;
        slow.next = null;
        node2 = reverse(node2);
        ListNode dummy = new ListNode();
        ListNode d = dummy;
        while(node1 != null || node2 != null){
            if(node1 != null){
                dummy.next = node1;
                dummy = dummy.next;
                node1 = node1.next;
            }
            if(node2 != null){
                dummy.next = node2;
                dummy = dummy.next;
                node2 = node2.next;
            }
        }
    }
}
